#include <stdio.h>
#include<stdlib.h>
#include<Windows.h>
#include <iostream>
using namespace std;
#define ARRAY_SIZE 9999
int a[ARRAY_SIZE];

void insertsort(int a[], int low, int high);
void swap(int a[], int i, int j);
int partition(int a[], int p, int r, int pivot);
int select(int a[], int l, int r, int k);

int main(void) {
	int n, k;
	cin >> n >> k;
	for (int i = 0;i < n;++i)
		cin >> a[i];
	cout << select(a, 0, n - 1, k) << endl;
	system("pause");
}



void swap(int a[], int x, int y) {
	int t = a[x];
	a[x] = a[y];
	a[y] = t;
}

void insertsort(int a[], int low, int high) {
	int i, j;
	int key;
	for (i = low + 1; i <= high; i++) {
		key = a[i];
		for (j = i - 1;j >= low && key < a[j];j--) {
			a[j + 1] = a[j];
		}
		a[j + 1] = key;
	}
}

int partition(int a[], int p, int r, int pivot) {
	int o;
	int i = p - 1;
	int j, t;

	for (j = p;j < r;j++) {
		if (a[j] == pivot) {
			swap(a, j, r);
		}
	}

	o = a[r];

	for (j = p;j < r;j++) {
		if (a[j] <= o) {
			i++;
			swap(a, i, j);
		}
	}
	swap(a, r, i + 1);
	return i + 1;
}

int select(int a[], int l, int r, int k) {
	int boodle;
	int i;
	int L, R, M;
	int pivot;
	int p, left_num;

	if (r - l + 1 <= 5) {
		insertsort(a, l, r);
		return a[l + k - 1];
	}

	boodle = (r - l + 1 + 5) / 5;
	for (i = 0; i < boodle; i++) {
		L = l + 5 * i;
		R = (l + 5 * i + 4) > r ? r : l + 5 * i + 4;
		M = (L + R) / 2;
		insertsort(a, L, R);
		swap(a, l + i, M);
	}
	//m*
	pivot = select(a, l, l + boodle - 1, (boodle + 1) / 2);
	p = partition(a, l, r, pivot);
	left_num = p - l;
	if (k == left_num + 1)
		return a[p];
	else if (k <= left_num)
		return select(a, l, p - 1, k);
	else
		return select(a, p + 1, r, k - left_num - 1);
}

