#include <iostream>
using namespace std;

int color[100];//颜色数组

bool Check(int k, int c[][100]);
void graphcolor(int n, int m, int c[][100]);

int main() {
	int i, j, n, m;
	int graph[100][100];//存储无向图
	cout << "顶点n和着色m：" << endl;
	cin >> n >> m;
	cout << "输入邻接矩阵：" << endl;
	for (i = 1; i <= n; i++) {
		for (j = 1; j <= n; j++) {
			cin >> graph[i][j];
		}
	}
	cout << "着色可能解m：" << endl;
	graphcolor(n, m, graph);
	return 0;
}


bool Check(int k, int graph[][100]) {           //判断是否发生冲突
	int i;
	for (i = 1; i < k; i++)
		if (graph[k][i] == 1 && color[i] == color[k])
			return false;
	return true;
}


void graphcolor(int n, int m, int graph[][100]){
	int i, k;
	int flag = 0;

	for (i = 1; i <= n; i++) {
		color[i] = 0;                     
	}
	k = 1;

	while (k >= 1) {
		color[k] = color[k] + 1;
		while (color[k] <= m) {
			if (Check(k, graph))
				break;
			else
				color[k] = color[k] + 1;      
		}
		if (color[k] <= m && k == n) {         
			for (i = 1; i <= n; i++) {
				cout << color[i] << " ";
			}
			cout << endl;
			flag = 1;
		}
		else if (color[k] <= m && k < n) {
			k = k + 1;                       
		}
		else {
			color[k] = 0;
			k = k - 1;                       //回溯
		}
	}
	if (flag == 1) {
		cout << "NO" << endl;
	}
}
